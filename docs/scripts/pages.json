[{"name":"abstract suspend fun delete(path: String): Boolean","description":"org.noelware.remi.core.StorageTrailer.delete","location":"core/org.noelware.remi.core/-storage-trailer/delete.html","searchKeys":["delete","abstract suspend fun delete(path: String): Boolean","org.noelware.remi.core.StorageTrailer.delete"]},{"name":"abstract suspend fun exists(path: String): Boolean","description":"org.noelware.remi.core.StorageTrailer.exists","location":"core/org.noelware.remi.core/-storage-trailer/exists.html","searchKeys":["exists","abstract suspend fun exists(path: String): Boolean","org.noelware.remi.core.StorageTrailer.exists"]},{"name":"abstract suspend fun fetch(key: String): Object?","description":"org.noelware.remi.core.StorageTrailer.fetch","location":"core/org.noelware.remi.core/-storage-trailer/fetch.html","searchKeys":["fetch","abstract suspend fun fetch(key: String): Object?","org.noelware.remi.core.StorageTrailer.fetch"]},{"name":"abstract suspend fun list(prefix: String, includeInputStream: Boolean = true): List<Object>","description":"org.noelware.remi.core.StorageTrailer.list","location":"core/org.noelware.remi.core/-storage-trailer/list.html","searchKeys":["list","abstract suspend fun list(prefix: String, includeInputStream: Boolean = true): List<Object>","org.noelware.remi.core.StorageTrailer.list"]},{"name":"abstract suspend fun listAll(includeInputStream: Boolean = true): List<Object>","description":"org.noelware.remi.core.StorageTrailer.listAll","location":"core/org.noelware.remi.core/-storage-trailer/list-all.html","searchKeys":["listAll","abstract suspend fun listAll(includeInputStream: Boolean = true): List<Object>","org.noelware.remi.core.StorageTrailer.listAll"]},{"name":"abstract suspend fun open(path: String): InputStream?","description":"org.noelware.remi.core.StorageTrailer.open","location":"core/org.noelware.remi.core/-storage-trailer/open.html","searchKeys":["open","abstract suspend fun open(path: String): InputStream?","org.noelware.remi.core.StorageTrailer.open"]},{"name":"abstract suspend fun upload(path: String, stream: InputStream, contentType: String = \"application/octet-stream\"): Boolean","description":"org.noelware.remi.core.StorageTrailer.upload","location":"core/org.noelware.remi.core/-storage-trailer/upload.html","searchKeys":["upload","abstract suspend fun upload(path: String, stream: InputStream, contentType: String = \"application/octet-stream\"): Boolean","org.noelware.remi.core.StorageTrailer.upload"]},{"name":"abstract val config: C","description":"org.noelware.remi.core.StorageTrailer.config","location":"core/org.noelware.remi.core/-storage-trailer/config.html","searchKeys":["config","abstract val config: C","org.noelware.remi.core.StorageTrailer.config"]},{"name":"abstract val name: String","description":"org.noelware.remi.core.StorageTrailer.name","location":"core/org.noelware.remi.core/-storage-trailer/name.html","searchKeys":["name","abstract val name: String","org.noelware.remi.core.StorageTrailer.name"]},{"name":"const val CHECK_WITH: String","description":"org.noelware.remi.core.CHECK_WITH","location":"core/org.noelware.remi.core/-c-h-e-c-k_-w-i-t-h.html","searchKeys":["CHECK_WITH","const val CHECK_WITH: String","org.noelware.remi.core.CHECK_WITH"]},{"name":"data class Object(val contentType: String = CHECK_WITH, val inputStream: InputStream? = null, val createdAt: LocalDateTime? = null, val lastModifiedAt: LocalDateTime, val original: File? = null, val size: Long, val name: String, val etag: String, val path: String)","description":"org.noelware.remi.core.Object","location":"core/org.noelware.remi.core/-object/index.html","searchKeys":["Object","data class Object(val contentType: String = CHECK_WITH, val inputStream: InputStream? = null, val createdAt: LocalDateTime? = null, val lastModifiedAt: LocalDateTime, val original: File? = null, val size: Long, val name: String, val etag: String, val path: String)","org.noelware.remi.core.Object"]},{"name":"fun <C : Configuration> StorageTrailer<C>.figureContentType(bytes: ByteArray): String","description":"org.noelware.remi.core.figureContentType","location":"core/org.noelware.remi.core/figure-content-type.html","searchKeys":["figureContentType","fun <C : Configuration> StorageTrailer<C>.figureContentType(bytes: ByteArray): String","org.noelware.remi.core.figureContentType"]},{"name":"fun <C : Configuration> StorageTrailer<C>.figureContentType(stream: InputStream): String","description":"org.noelware.remi.core.figureContentType","location":"core/org.noelware.remi.core/figure-content-type.html","searchKeys":["figureContentType","fun <C : Configuration> StorageTrailer<C>.figureContentType(stream: InputStream): String","org.noelware.remi.core.figureContentType"]},{"name":"fun Object(contentType: String = CHECK_WITH, inputStream: InputStream? = null, createdAt: LocalDateTime? = null, lastModifiedAt: LocalDateTime, original: File? = null, size: Long, name: String, etag: String, path: String)","description":"org.noelware.remi.core.Object.Object","location":"core/org.noelware.remi.core/-object/-object.html","searchKeys":["Object","fun Object(contentType: String = CHECK_WITH, inputStream: InputStream? = null, createdAt: LocalDateTime? = null, lastModifiedAt: LocalDateTime, original: File? = null, size: Long, name: String, etag: String, path: String)","org.noelware.remi.core.Object.Object"]},{"name":"fun toInputStream(): InputStream","description":"org.noelware.remi.core.Object.toInputStream","location":"core/org.noelware.remi.core/-object/to-input-stream.html","searchKeys":["toInputStream","fun toInputStream(): InputStream","org.noelware.remi.core.Object.toInputStream"]},{"name":"interface Configuration","description":"org.noelware.remi.core.Configuration","location":"core/org.noelware.remi.core/-configuration/index.html","searchKeys":["Configuration","interface Configuration","org.noelware.remi.core.Configuration"]},{"name":"interface StorageTrailer<C : Configuration>","description":"org.noelware.remi.core.StorageTrailer","location":"core/org.noelware.remi.core/-storage-trailer/index.html","searchKeys":["StorageTrailer","interface StorageTrailer<C : Configuration>","org.noelware.remi.core.StorageTrailer"]},{"name":"object EmptyConfiguration : Configuration","description":"org.noelware.remi.core.EmptyConfiguration","location":"core/org.noelware.remi.core/-empty-configuration/index.html","searchKeys":["EmptyConfiguration","object EmptyConfiguration : Configuration","org.noelware.remi.core.EmptyConfiguration"]},{"name":"open suspend fun init()","description":"org.noelware.remi.core.StorageTrailer.init","location":"core/org.noelware.remi.core/-storage-trailer/init.html","searchKeys":["init","open suspend fun init()","org.noelware.remi.core.StorageTrailer.init"]},{"name":"val contentType: String","description":"org.noelware.remi.core.Object.contentType","location":"core/org.noelware.remi.core/-object/content-type.html","searchKeys":["contentType","val contentType: String","org.noelware.remi.core.Object.contentType"]},{"name":"val createdAt: LocalDateTime? = null","description":"org.noelware.remi.core.Object.createdAt","location":"core/org.noelware.remi.core/-object/created-at.html","searchKeys":["createdAt","val createdAt: LocalDateTime? = null","org.noelware.remi.core.Object.createdAt"]},{"name":"val etag: String","description":"org.noelware.remi.core.Object.etag","location":"core/org.noelware.remi.core/-object/etag.html","searchKeys":["etag","val etag: String","org.noelware.remi.core.Object.etag"]},{"name":"val inputStream: InputStream? = null","description":"org.noelware.remi.core.Object.inputStream","location":"core/org.noelware.remi.core/-object/input-stream.html","searchKeys":["inputStream","val inputStream: InputStream? = null","org.noelware.remi.core.Object.inputStream"]},{"name":"val isWeakETag: Boolean","description":"org.noelware.remi.core.Object.isWeakETag","location":"core/org.noelware.remi.core/-object/is-weak-e-tag.html","searchKeys":["isWeakETag","val isWeakETag: Boolean","org.noelware.remi.core.Object.isWeakETag"]},{"name":"val lastModifiedAt: LocalDateTime","description":"org.noelware.remi.core.Object.lastModifiedAt","location":"core/org.noelware.remi.core/-object/last-modified-at.html","searchKeys":["lastModifiedAt","val lastModifiedAt: LocalDateTime","org.noelware.remi.core.Object.lastModifiedAt"]},{"name":"val name: String","description":"org.noelware.remi.core.Object.name","location":"core/org.noelware.remi.core/-object/name.html","searchKeys":["name","val name: String","org.noelware.remi.core.Object.name"]},{"name":"val original: File? = null","description":"org.noelware.remi.core.Object.original","location":"core/org.noelware.remi.core/-object/original.html","searchKeys":["original","val original: File? = null","org.noelware.remi.core.Object.original"]},{"name":"val path: String","description":"org.noelware.remi.core.Object.path","location":"core/org.noelware.remi.core/-object/path.html","searchKeys":["path","val path: String","org.noelware.remi.core.Object.path"]},{"name":"val size: Long","description":"org.noelware.remi.core.Object.size","location":"core/org.noelware.remi.core/-object/size.html","searchKeys":["size","val size: Long","org.noelware.remi.core.Object.size"]},{"name":"class MinIOStorageTrailer(val config: MinIOStorageConfig) : StorageTrailer<MinIOStorageConfig> ","description":"org.noelware.remi.minio.MinIOStorageTrailer","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/index.html","searchKeys":["MinIOStorageTrailer","class MinIOStorageTrailer(val config: MinIOStorageConfig) : StorageTrailer<MinIOStorageConfig> ","org.noelware.remi.minio.MinIOStorageTrailer"]},{"name":"data class MinIOStorageConfig(val endpoint: String = \"\", val accessKey: String = \"\", val secretKey: String = \"\", val bucket: String = \"\") : Configuration","description":"org.noelware.remi.minio.MinIOStorageConfig","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-config/index.html","searchKeys":["MinIOStorageConfig","data class MinIOStorageConfig(val endpoint: String = \"\", val accessKey: String = \"\", val secretKey: String = \"\", val bucket: String = \"\") : Configuration","org.noelware.remi.minio.MinIOStorageConfig"]},{"name":"fun MinIOStorageConfig(endpoint: String = \"\", accessKey: String = \"\", secretKey: String = \"\", bucket: String = \"\")","description":"org.noelware.remi.minio.MinIOStorageConfig.MinIOStorageConfig","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-config/-min-i-o-storage-config.html","searchKeys":["MinIOStorageConfig","fun MinIOStorageConfig(endpoint: String = \"\", accessKey: String = \"\", secretKey: String = \"\", bucket: String = \"\")","org.noelware.remi.minio.MinIOStorageConfig.MinIOStorageConfig"]},{"name":"fun MinIOStorageTrailer(builder: MinIOStorageConfig.() -> Unit): MinIOStorageTrailer","description":"org.noelware.remi.minio.MinIOStorageTrailer","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer.html","searchKeys":["MinIOStorageTrailer","fun MinIOStorageTrailer(builder: MinIOStorageConfig.() -> Unit): MinIOStorageTrailer","org.noelware.remi.minio.MinIOStorageTrailer"]},{"name":"fun MinIOStorageTrailer(config: MinIOStorageConfig)","description":"org.noelware.remi.minio.MinIOStorageTrailer.MinIOStorageTrailer","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/-min-i-o-storage-trailer.html","searchKeys":["MinIOStorageTrailer","fun MinIOStorageTrailer(config: MinIOStorageConfig)","org.noelware.remi.minio.MinIOStorageTrailer.MinIOStorageTrailer"]},{"name":"lateinit var client: MinioAsyncClient","description":"org.noelware.remi.minio.MinIOStorageTrailer.client","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/client.html","searchKeys":["client","lateinit var client: MinioAsyncClient","org.noelware.remi.minio.MinIOStorageTrailer.client"]},{"name":"open override val config: MinIOStorageConfig","description":"org.noelware.remi.minio.MinIOStorageTrailer.config","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/config.html","searchKeys":["config","open override val config: MinIOStorageConfig","org.noelware.remi.minio.MinIOStorageTrailer.config"]},{"name":"open override val name: String","description":"org.noelware.remi.minio.MinIOStorageTrailer.name","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/name.html","searchKeys":["name","open override val name: String","org.noelware.remi.minio.MinIOStorageTrailer.name"]},{"name":"open suspend override fun delete(path: String): Boolean","description":"org.noelware.remi.minio.MinIOStorageTrailer.delete","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/delete.html","searchKeys":["delete","open suspend override fun delete(path: String): Boolean","org.noelware.remi.minio.MinIOStorageTrailer.delete"]},{"name":"open suspend override fun exists(path: String): Boolean","description":"org.noelware.remi.minio.MinIOStorageTrailer.exists","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/exists.html","searchKeys":["exists","open suspend override fun exists(path: String): Boolean","org.noelware.remi.minio.MinIOStorageTrailer.exists"]},{"name":"open suspend override fun fetch(key: String): Object?","description":"org.noelware.remi.minio.MinIOStorageTrailer.fetch","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/fetch.html","searchKeys":["fetch","open suspend override fun fetch(key: String): Object?","org.noelware.remi.minio.MinIOStorageTrailer.fetch"]},{"name":"open suspend override fun init()","description":"org.noelware.remi.minio.MinIOStorageTrailer.init","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/init.html","searchKeys":["init","open suspend override fun init()","org.noelware.remi.minio.MinIOStorageTrailer.init"]},{"name":"open suspend override fun list(prefix: String, includeInputStream: Boolean): List<Object>","description":"org.noelware.remi.minio.MinIOStorageTrailer.list","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/list.html","searchKeys":["list","open suspend override fun list(prefix: String, includeInputStream: Boolean): List<Object>","org.noelware.remi.minio.MinIOStorageTrailer.list"]},{"name":"open suspend override fun listAll(includeInputStream: Boolean): List<Object>","description":"org.noelware.remi.minio.MinIOStorageTrailer.listAll","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/list-all.html","searchKeys":["listAll","open suspend override fun listAll(includeInputStream: Boolean): List<Object>","org.noelware.remi.minio.MinIOStorageTrailer.listAll"]},{"name":"open suspend override fun open(path: String): InputStream?","description":"org.noelware.remi.minio.MinIOStorageTrailer.open","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/open.html","searchKeys":["open","open suspend override fun open(path: String): InputStream?","org.noelware.remi.minio.MinIOStorageTrailer.open"]},{"name":"open suspend override fun upload(path: String, stream: InputStream, contentType: String): Boolean","description":"org.noelware.remi.minio.MinIOStorageTrailer.upload","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/upload.html","searchKeys":["upload","open suspend override fun upload(path: String, stream: InputStream, contentType: String): Boolean","org.noelware.remi.minio.MinIOStorageTrailer.upload"]},{"name":"suspend fun fetch(key: String, builder: GetObjectArgs.Builder.() -> Unit = {}): Object?","description":"org.noelware.remi.minio.MinIOStorageTrailer.fetch","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-trailer/fetch.html","searchKeys":["fetch","suspend fun fetch(key: String, builder: GetObjectArgs.Builder.() -> Unit = {}): Object?","org.noelware.remi.minio.MinIOStorageTrailer.fetch"]},{"name":"val accessKey: String","description":"org.noelware.remi.minio.MinIOStorageConfig.accessKey","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-config/access-key.html","searchKeys":["accessKey","val accessKey: String","org.noelware.remi.minio.MinIOStorageConfig.accessKey"]},{"name":"val bucket: String","description":"org.noelware.remi.minio.MinIOStorageConfig.bucket","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-config/bucket.html","searchKeys":["bucket","val bucket: String","org.noelware.remi.minio.MinIOStorageConfig.bucket"]},{"name":"val endpoint: String","description":"org.noelware.remi.minio.MinIOStorageConfig.endpoint","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-config/endpoint.html","searchKeys":["endpoint","val endpoint: String","org.noelware.remi.minio.MinIOStorageConfig.endpoint"]},{"name":"val secretKey: String","description":"org.noelware.remi.minio.MinIOStorageConfig.secretKey","location":"support-minio/org.noelware.remi.minio/-min-i-o-storage-config/secret-key.html","searchKeys":["secretKey","val secretKey: String","org.noelware.remi.minio.MinIOStorageConfig.secretKey"]},{"name":"Amazon","description":"org.noelware.remi.s3.S3Provider.Amazon","location":"support-s3/org.noelware.remi.s3/-s3-provider/-amazon/index.html","searchKeys":["Amazon","Amazon","org.noelware.remi.s3.S3Provider.Amazon"]},{"name":"Custom","description":"org.noelware.remi.s3.S3Provider.Custom","location":"support-s3/org.noelware.remi.s3/-s3-provider/-custom/index.html","searchKeys":["Custom","Custom","org.noelware.remi.s3.S3Provider.Custom"]},{"name":"Wasabi","description":"org.noelware.remi.s3.S3Provider.Wasabi","location":"support-s3/org.noelware.remi.s3/-s3-provider/-wasabi/index.html","searchKeys":["Wasabi","Wasabi","org.noelware.remi.s3.S3Provider.Wasabi"]},{"name":"class S3StorageTrailer(val config: S3StorageConfig) : StorageTrailer<S3StorageConfig> ","description":"org.noelware.remi.s3.S3StorageTrailer","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/index.html","searchKeys":["S3StorageTrailer","class S3StorageTrailer(val config: S3StorageConfig) : StorageTrailer<S3StorageConfig> ","org.noelware.remi.s3.S3StorageTrailer"]},{"name":"data class S3StorageConfig(var enableSignerV4Requests: Boolean = false, var enforcePathAccessStyle: Boolean = false, var defaultObjectAcl: ObjectCannedACL = ObjectCannedACL.BUCKET_OWNER_FULL_CONTROL, var defaultAcl: BucketCannedACL = BucketCannedACL.PUBLIC_READ, var secretKey: String? = null, var accessKey: String? = null, var endpoint: String? = null, var provider: S3Provider = S3Provider.Amazon, var region: Region = Region.US_EAST_1, var bucket: String = \"remi\") : Configuration","description":"org.noelware.remi.s3.S3StorageConfig","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/index.html","searchKeys":["S3StorageConfig","data class S3StorageConfig(var enableSignerV4Requests: Boolean = false, var enforcePathAccessStyle: Boolean = false, var defaultObjectAcl: ObjectCannedACL = ObjectCannedACL.BUCKET_OWNER_FULL_CONTROL, var defaultAcl: BucketCannedACL = BucketCannedACL.PUBLIC_READ, var secretKey: String? = null, var accessKey: String? = null, var endpoint: String? = null, var provider: S3Provider = S3Provider.Amazon, var region: Region = Region.US_EAST_1, var bucket: String = \"remi\") : Configuration","org.noelware.remi.s3.S3StorageConfig"]},{"name":"enum S3Provider : Enum<S3Provider> ","description":"org.noelware.remi.s3.S3Provider","location":"support-s3/org.noelware.remi.s3/-s3-provider/index.html","searchKeys":["S3Provider","enum S3Provider : Enum<S3Provider> ","org.noelware.remi.s3.S3Provider"]},{"name":"fun S3StorageConfig(enableSignerV4Requests: Boolean = false, enforcePathAccessStyle: Boolean = false, defaultObjectAcl: ObjectCannedACL = ObjectCannedACL.BUCKET_OWNER_FULL_CONTROL, defaultAcl: BucketCannedACL = BucketCannedACL.PUBLIC_READ, secretKey: String? = null, accessKey: String? = null, endpoint: String? = null, provider: S3Provider = S3Provider.Amazon, region: Region = Region.US_EAST_1, bucket: String = \"remi\")","description":"org.noelware.remi.s3.S3StorageConfig.S3StorageConfig","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/-s3-storage-config.html","searchKeys":["S3StorageConfig","fun S3StorageConfig(enableSignerV4Requests: Boolean = false, enforcePathAccessStyle: Boolean = false, defaultObjectAcl: ObjectCannedACL = ObjectCannedACL.BUCKET_OWNER_FULL_CONTROL, defaultAcl: BucketCannedACL = BucketCannedACL.PUBLIC_READ, secretKey: String? = null, accessKey: String? = null, endpoint: String? = null, provider: S3Provider = S3Provider.Amazon, region: Region = Region.US_EAST_1, bucket: String = \"remi\")","org.noelware.remi.s3.S3StorageConfig.S3StorageConfig"]},{"name":"fun S3StorageTrailer(config: S3StorageConfig)","description":"org.noelware.remi.s3.S3StorageTrailer.S3StorageTrailer","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/-s3-storage-trailer.html","searchKeys":["S3StorageTrailer","fun S3StorageTrailer(config: S3StorageConfig)","org.noelware.remi.s3.S3StorageTrailer.S3StorageTrailer"]},{"name":"fun S3StorageTrailer(config: S3StorageConfig.() -> Unit = {}): S3StorageTrailer","description":"org.noelware.remi.s3.S3StorageTrailer","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer.html","searchKeys":["S3StorageTrailer","fun S3StorageTrailer(config: S3StorageConfig.() -> Unit = {}): S3StorageTrailer","org.noelware.remi.s3.S3StorageTrailer"]},{"name":"lateinit var client: S3Client","description":"org.noelware.remi.s3.S3StorageTrailer.client","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/client.html","searchKeys":["client","lateinit var client: S3Client","org.noelware.remi.s3.S3StorageTrailer.client"]},{"name":"object AwsRegionSerializer : KSerializer<Region> ","description":"org.noelware.remi.s3.serializers.AwsRegionSerializer","location":"support-s3/org.noelware.remi.s3.serializers/-aws-region-serializer/index.html","searchKeys":["AwsRegionSerializer","object AwsRegionSerializer : KSerializer<Region> ","org.noelware.remi.s3.serializers.AwsRegionSerializer"]},{"name":"object BucketCannedACLSerializer : KSerializer<BucketCannedACL> ","description":"org.noelware.remi.s3.serializers.BucketCannedACLSerializer","location":"support-s3/org.noelware.remi.s3.serializers/-bucket-canned-a-c-l-serializer/index.html","searchKeys":["BucketCannedACLSerializer","object BucketCannedACLSerializer : KSerializer<BucketCannedACL> ","org.noelware.remi.s3.serializers.BucketCannedACLSerializer"]},{"name":"object Companion : KSerializer<S3Provider> ","description":"org.noelware.remi.s3.S3Provider.Companion","location":"support-s3/org.noelware.remi.s3/-s3-provider/-companion/index.html","searchKeys":["Companion","object Companion : KSerializer<S3Provider> ","org.noelware.remi.s3.S3Provider.Companion"]},{"name":"object ObjectCannedACLSerializer : KSerializer<ObjectCannedACL> ","description":"org.noelware.remi.s3.serializers.ObjectCannedACLSerializer","location":"support-s3/org.noelware.remi.s3.serializers/-object-canned-a-c-l-serializer/index.html","searchKeys":["ObjectCannedACLSerializer","object ObjectCannedACLSerializer : KSerializer<ObjectCannedACL> ","org.noelware.remi.s3.serializers.ObjectCannedACLSerializer"]},{"name":"open override fun deserialize(decoder: Decoder): BucketCannedACL","description":"org.noelware.remi.s3.serializers.BucketCannedACLSerializer.deserialize","location":"support-s3/org.noelware.remi.s3.serializers/-bucket-canned-a-c-l-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): BucketCannedACL","org.noelware.remi.s3.serializers.BucketCannedACLSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): ObjectCannedACL","description":"org.noelware.remi.s3.serializers.ObjectCannedACLSerializer.deserialize","location":"support-s3/org.noelware.remi.s3.serializers/-object-canned-a-c-l-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): ObjectCannedACL","org.noelware.remi.s3.serializers.ObjectCannedACLSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): Region","description":"org.noelware.remi.s3.serializers.AwsRegionSerializer.deserialize","location":"support-s3/org.noelware.remi.s3.serializers/-aws-region-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): Region","org.noelware.remi.s3.serializers.AwsRegionSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): S3Provider","description":"org.noelware.remi.s3.S3Provider.Companion.deserialize","location":"support-s3/org.noelware.remi.s3/-s3-provider/-companion/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): S3Provider","org.noelware.remi.s3.S3Provider.Companion.deserialize"]},{"name":"open override fun serialize(encoder: Encoder, value: BucketCannedACL)","description":"org.noelware.remi.s3.serializers.BucketCannedACLSerializer.serialize","location":"support-s3/org.noelware.remi.s3.serializers/-bucket-canned-a-c-l-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: BucketCannedACL)","org.noelware.remi.s3.serializers.BucketCannedACLSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: ObjectCannedACL)","description":"org.noelware.remi.s3.serializers.ObjectCannedACLSerializer.serialize","location":"support-s3/org.noelware.remi.s3.serializers/-object-canned-a-c-l-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: ObjectCannedACL)","org.noelware.remi.s3.serializers.ObjectCannedACLSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: Region)","description":"org.noelware.remi.s3.serializers.AwsRegionSerializer.serialize","location":"support-s3/org.noelware.remi.s3.serializers/-aws-region-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: Region)","org.noelware.remi.s3.serializers.AwsRegionSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: S3Provider)","description":"org.noelware.remi.s3.S3Provider.Companion.serialize","location":"support-s3/org.noelware.remi.s3/-s3-provider/-companion/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: S3Provider)","org.noelware.remi.s3.S3Provider.Companion.serialize"]},{"name":"open override val config: S3StorageConfig","description":"org.noelware.remi.s3.S3StorageTrailer.config","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/config.html","searchKeys":["config","open override val config: S3StorageConfig","org.noelware.remi.s3.S3StorageTrailer.config"]},{"name":"open override val descriptor: SerialDescriptor","description":"org.noelware.remi.s3.S3Provider.Companion.descriptor","location":"support-s3/org.noelware.remi.s3/-s3-provider/-companion/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","org.noelware.remi.s3.S3Provider.Companion.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"org.noelware.remi.s3.serializers.AwsRegionSerializer.descriptor","location":"support-s3/org.noelware.remi.s3.serializers/-aws-region-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","org.noelware.remi.s3.serializers.AwsRegionSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"org.noelware.remi.s3.serializers.BucketCannedACLSerializer.descriptor","location":"support-s3/org.noelware.remi.s3.serializers/-bucket-canned-a-c-l-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","org.noelware.remi.s3.serializers.BucketCannedACLSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"org.noelware.remi.s3.serializers.ObjectCannedACLSerializer.descriptor","location":"support-s3/org.noelware.remi.s3.serializers/-object-canned-a-c-l-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","org.noelware.remi.s3.serializers.ObjectCannedACLSerializer.descriptor"]},{"name":"open override val name: String","description":"org.noelware.remi.s3.S3StorageTrailer.name","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/name.html","searchKeys":["name","open override val name: String","org.noelware.remi.s3.S3StorageTrailer.name"]},{"name":"open suspend override fun delete(path: String): Boolean","description":"org.noelware.remi.s3.S3StorageTrailer.delete","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/delete.html","searchKeys":["delete","open suspend override fun delete(path: String): Boolean","org.noelware.remi.s3.S3StorageTrailer.delete"]},{"name":"open suspend override fun exists(path: String): Boolean","description":"org.noelware.remi.s3.S3StorageTrailer.exists","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/exists.html","searchKeys":["exists","open suspend override fun exists(path: String): Boolean","org.noelware.remi.s3.S3StorageTrailer.exists"]},{"name":"open suspend override fun fetch(key: String): Object?","description":"org.noelware.remi.s3.S3StorageTrailer.fetch","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/fetch.html","searchKeys":["fetch","open suspend override fun fetch(key: String): Object?","org.noelware.remi.s3.S3StorageTrailer.fetch"]},{"name":"open suspend override fun init()","description":"org.noelware.remi.s3.S3StorageTrailer.init","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/init.html","searchKeys":["init","open suspend override fun init()","org.noelware.remi.s3.S3StorageTrailer.init"]},{"name":"open suspend override fun list(prefix: String, includeInputStream: Boolean): List<Object>","description":"org.noelware.remi.s3.S3StorageTrailer.list","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/list.html","searchKeys":["list","open suspend override fun list(prefix: String, includeInputStream: Boolean): List<Object>","org.noelware.remi.s3.S3StorageTrailer.list"]},{"name":"open suspend override fun listAll(includeInputStream: Boolean): List<Object>","description":"org.noelware.remi.s3.S3StorageTrailer.listAll","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/list-all.html","searchKeys":["listAll","open suspend override fun listAll(includeInputStream: Boolean): List<Object>","org.noelware.remi.s3.S3StorageTrailer.listAll"]},{"name":"open suspend override fun open(path: String): InputStream?","description":"org.noelware.remi.s3.S3StorageTrailer.open","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/open.html","searchKeys":["open","open suspend override fun open(path: String): InputStream?","org.noelware.remi.s3.S3StorageTrailer.open"]},{"name":"open suspend override fun upload(path: String, stream: InputStream, contentType: String): Boolean","description":"org.noelware.remi.s3.S3StorageTrailer.upload","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/upload.html","searchKeys":["upload","open suspend override fun upload(path: String, stream: InputStream, contentType: String): Boolean","org.noelware.remi.s3.S3StorageTrailer.upload"]},{"name":"suspend fun fetch(key: String, builder: GetObjectRequest.Builder.() -> Unit = {}): Object?","description":"org.noelware.remi.s3.S3StorageTrailer.fetch","location":"support-s3/org.noelware.remi.s3/-s3-storage-trailer/fetch.html","searchKeys":["fetch","suspend fun fetch(key: String, builder: GetObjectRequest.Builder.() -> Unit = {}): Object?","org.noelware.remi.s3.S3StorageTrailer.fetch"]},{"name":"val endpoint: String? = null","description":"org.noelware.remi.s3.S3Provider.endpoint","location":"support-s3/org.noelware.remi.s3/-s3-provider/endpoint.html","searchKeys":["endpoint","val endpoint: String? = null","org.noelware.remi.s3.S3Provider.endpoint"]},{"name":"val key: String","description":"org.noelware.remi.s3.S3Provider.key","location":"support-s3/org.noelware.remi.s3/-s3-provider/key.html","searchKeys":["key","val key: String","org.noelware.remi.s3.S3Provider.key"]},{"name":"var accessKey: String? = null","description":"org.noelware.remi.s3.S3StorageConfig.accessKey","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/access-key.html","searchKeys":["accessKey","var accessKey: String? = null","org.noelware.remi.s3.S3StorageConfig.accessKey"]},{"name":"var bucket: String","description":"org.noelware.remi.s3.S3StorageConfig.bucket","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/bucket.html","searchKeys":["bucket","var bucket: String","org.noelware.remi.s3.S3StorageConfig.bucket"]},{"name":"var defaultAcl: BucketCannedACL","description":"org.noelware.remi.s3.S3StorageConfig.defaultAcl","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/default-acl.html","searchKeys":["defaultAcl","var defaultAcl: BucketCannedACL","org.noelware.remi.s3.S3StorageConfig.defaultAcl"]},{"name":"var defaultObjectAcl: ObjectCannedACL","description":"org.noelware.remi.s3.S3StorageConfig.defaultObjectAcl","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/default-object-acl.html","searchKeys":["defaultObjectAcl","var defaultObjectAcl: ObjectCannedACL","org.noelware.remi.s3.S3StorageConfig.defaultObjectAcl"]},{"name":"var enableSignerV4Requests: Boolean = false","description":"org.noelware.remi.s3.S3StorageConfig.enableSignerV4Requests","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/enable-signer-v4-requests.html","searchKeys":["enableSignerV4Requests","var enableSignerV4Requests: Boolean = false","org.noelware.remi.s3.S3StorageConfig.enableSignerV4Requests"]},{"name":"var endpoint: String? = null","description":"org.noelware.remi.s3.S3StorageConfig.endpoint","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/endpoint.html","searchKeys":["endpoint","var endpoint: String? = null","org.noelware.remi.s3.S3StorageConfig.endpoint"]},{"name":"var enforcePathAccessStyle: Boolean = false","description":"org.noelware.remi.s3.S3StorageConfig.enforcePathAccessStyle","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/enforce-path-access-style.html","searchKeys":["enforcePathAccessStyle","var enforcePathAccessStyle: Boolean = false","org.noelware.remi.s3.S3StorageConfig.enforcePathAccessStyle"]},{"name":"var provider: S3Provider","description":"org.noelware.remi.s3.S3StorageConfig.provider","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/provider.html","searchKeys":["provider","var provider: S3Provider","org.noelware.remi.s3.S3StorageConfig.provider"]},{"name":"var region: Region","description":"org.noelware.remi.s3.S3StorageConfig.region","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/region.html","searchKeys":["region","var region: Region","org.noelware.remi.s3.S3StorageConfig.region"]},{"name":"var secretKey: String? = null","description":"org.noelware.remi.s3.S3StorageConfig.secretKey","location":"support-s3/org.noelware.remi.s3/-s3-storage-config/secret-key.html","searchKeys":["secretKey","var secretKey: String? = null","org.noelware.remi.s3.S3StorageConfig.secretKey"]},{"name":"class FileIsDirectoryException(path: String) : RuntimeException","description":"org.noelware.remi.filesystem.FileIsDirectoryException","location":"support-fs/org.noelware.remi.filesystem/-file-is-directory-exception/index.html","searchKeys":["FileIsDirectoryException","class FileIsDirectoryException(path: String) : RuntimeException","org.noelware.remi.filesystem.FileIsDirectoryException"]},{"name":"class FileNotFoundException(message: String) : RuntimeException","description":"org.noelware.remi.filesystem.FileNotFoundException","location":"support-fs/org.noelware.remi.filesystem/-file-not-found-exception/index.html","searchKeys":["FileNotFoundException","class FileNotFoundException(message: String) : RuntimeException","org.noelware.remi.filesystem.FileNotFoundException"]},{"name":"class FilesystemStorageTrailer(val config: FilesystemStorageConfig) : StorageTrailer<FilesystemStorageConfig> ","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/index.html","searchKeys":["FilesystemStorageTrailer","class FilesystemStorageTrailer(val config: FilesystemStorageConfig) : StorageTrailer<FilesystemStorageConfig> ","org.noelware.remi.filesystem.FilesystemStorageTrailer"]},{"name":"data class FilesystemStorageConfig(val directory: String) : Configuration","description":"org.noelware.remi.filesystem.FilesystemStorageConfig","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-config/index.html","searchKeys":["FilesystemStorageConfig","data class FilesystemStorageConfig(val directory: String) : Configuration","org.noelware.remi.filesystem.FilesystemStorageConfig"]},{"name":"fun <T> File.ifExists(body: File.() -> T): T?","description":"org.noelware.remi.filesystem.ifExists","location":"support-fs/org.noelware.remi.filesystem/if-exists.html","searchKeys":["ifExists","fun <T> File.ifExists(body: File.() -> T): T?","org.noelware.remi.filesystem.ifExists"]},{"name":"fun <T> File.ifNotExists(body: File.() -> T): T?","description":"org.noelware.remi.filesystem.ifNotExists","location":"support-fs/org.noelware.remi.filesystem/if-not-exists.html","searchKeys":["ifNotExists","fun <T> File.ifNotExists(body: File.() -> T): T?","org.noelware.remi.filesystem.ifNotExists"]},{"name":"fun FileIsDirectoryException(path: String)","description":"org.noelware.remi.filesystem.FileIsDirectoryException.FileIsDirectoryException","location":"support-fs/org.noelware.remi.filesystem/-file-is-directory-exception/-file-is-directory-exception.html","searchKeys":["FileIsDirectoryException","fun FileIsDirectoryException(path: String)","org.noelware.remi.filesystem.FileIsDirectoryException.FileIsDirectoryException"]},{"name":"fun FileNotFoundException(message: String)","description":"org.noelware.remi.filesystem.FileNotFoundException.FileNotFoundException","location":"support-fs/org.noelware.remi.filesystem/-file-not-found-exception/-file-not-found-exception.html","searchKeys":["FileNotFoundException","fun FileNotFoundException(message: String)","org.noelware.remi.filesystem.FileNotFoundException.FileNotFoundException"]},{"name":"fun FilesystemStorageConfig(directory: String)","description":"org.noelware.remi.filesystem.FilesystemStorageConfig.FilesystemStorageConfig","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-config/-filesystem-storage-config.html","searchKeys":["FilesystemStorageConfig","fun FilesystemStorageConfig(directory: String)","org.noelware.remi.filesystem.FilesystemStorageConfig.FilesystemStorageConfig"]},{"name":"fun FilesystemStorageTrailer(config: FilesystemStorageConfig)","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.FilesystemStorageTrailer","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/-filesystem-storage-trailer.html","searchKeys":["FilesystemStorageTrailer","fun FilesystemStorageTrailer(config: FilesystemStorageConfig)","org.noelware.remi.filesystem.FilesystemStorageTrailer.FilesystemStorageTrailer"]},{"name":"fun FilesystemStorageTrailer(directory: String): FilesystemStorageTrailer","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer.html","searchKeys":["FilesystemStorageTrailer","fun FilesystemStorageTrailer(directory: String): FilesystemStorageTrailer","org.noelware.remi.filesystem.FilesystemStorageTrailer"]},{"name":"fun normalizePath(path: String): String","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.normalizePath","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/normalize-path.html","searchKeys":["normalizePath","fun normalizePath(path: String): String","org.noelware.remi.filesystem.FilesystemStorageTrailer.normalizePath"]},{"name":"open override val config: FilesystemStorageConfig","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.config","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/config.html","searchKeys":["config","open override val config: FilesystemStorageConfig","org.noelware.remi.filesystem.FilesystemStorageTrailer.config"]},{"name":"open override val name: String","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.name","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/name.html","searchKeys":["name","open override val name: String","org.noelware.remi.filesystem.FilesystemStorageTrailer.name"]},{"name":"open suspend override fun delete(path: String): Boolean","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.delete","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/delete.html","searchKeys":["delete","open suspend override fun delete(path: String): Boolean","org.noelware.remi.filesystem.FilesystemStorageTrailer.delete"]},{"name":"open suspend override fun exists(path: String): Boolean","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.exists","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/exists.html","searchKeys":["exists","open suspend override fun exists(path: String): Boolean","org.noelware.remi.filesystem.FilesystemStorageTrailer.exists"]},{"name":"open suspend override fun fetch(key: String): Object?","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.fetch","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/fetch.html","searchKeys":["fetch","open suspend override fun fetch(key: String): Object?","org.noelware.remi.filesystem.FilesystemStorageTrailer.fetch"]},{"name":"open suspend override fun init()","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.init","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/init.html","searchKeys":["init","open suspend override fun init()","org.noelware.remi.filesystem.FilesystemStorageTrailer.init"]},{"name":"open suspend override fun list(prefix: String, includeInputStream: Boolean): List<Object>","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.list","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/list.html","searchKeys":["list","open suspend override fun list(prefix: String, includeInputStream: Boolean): List<Object>","org.noelware.remi.filesystem.FilesystemStorageTrailer.list"]},{"name":"open suspend override fun listAll(includeInputStream: Boolean): List<Object>","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.listAll","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/list-all.html","searchKeys":["listAll","open suspend override fun listAll(includeInputStream: Boolean): List<Object>","org.noelware.remi.filesystem.FilesystemStorageTrailer.listAll"]},{"name":"open suspend override fun open(path: String): InputStream?","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.open","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/open.html","searchKeys":["open","open suspend override fun open(path: String): InputStream?","org.noelware.remi.filesystem.FilesystemStorageTrailer.open"]},{"name":"open suspend override fun upload(path: String, stream: InputStream, contentType: String): Boolean","description":"org.noelware.remi.filesystem.FilesystemStorageTrailer.upload","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-trailer/upload.html","searchKeys":["upload","open suspend override fun upload(path: String, stream: InputStream, contentType: String): Boolean","org.noelware.remi.filesystem.FilesystemStorageTrailer.upload"]},{"name":"val directory: String","description":"org.noelware.remi.filesystem.FilesystemStorageConfig.directory","location":"support-fs/org.noelware.remi.filesystem/-filesystem-storage-config/directory.html","searchKeys":["directory","val directory: String","org.noelware.remi.filesystem.FilesystemStorageConfig.directory"]}]